diff --git a/Makefile b/Makefile
index 39a99d7..aff5c1c 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -32,7 +33,7 @@ OBJS = \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
-#TOOLPREFIX = 
+#TOOLPREFIX =
 
 # Try to infer the correct TOOLPREFIX if not set
 ifndef TOOLPREFIX
@@ -74,7 +75,7 @@ endif
 LDFLAGS = -z max-page-size=4096
 
 $K/kernel: $(OBJS) $K/kernel.ld $U/initcode
-	$(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS) 
+	$(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS)
 	$(OBJDUMP) -S $K/kernel > $K/kernel.asm
 	$(OBJDUMP) -t $K/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $K/kernel.sym
 
@@ -132,13 +133,16 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testlivepage\
+	$U/_testswap\
+	$U/_testpagefork\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
 -include kernel/*.d user/*.d
 
-clean: 
+clean:
 	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
 	*/*.o */*.d */*.asm */*.sym \
 	$U/initcode $U/initcode.out $K/kernel fs.img \
@@ -170,4 +174,3 @@ qemu: $K/kernel fs.img
 qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
 	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
-
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..938e4c9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,12 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct user_page_alloc;
+
+struct live_info;
+struct live_pages_list;
+struct swapped_pages;
 
 // bio.c
 void            binit(void);
@@ -36,6 +42,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +115,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -173,6 +188,11 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+uint            swap_out();
+struct live_info     remove_live_page(int);
+void            add_live_page(pagetable_t, uint64, uint64);
+int             search_live_page(uint64);
+void            print_num_live_pages();
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..e9790c8 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -5,15 +5,19 @@
 #include "types.h"
 #include "param.h"
 #include "memlayout.h"
-#include "spinlock.h"
 #include "riscv.h"
 #include "defs.h"
+#include "swap.h"
 
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+extern struct live_pages_list live_list;
+
+extern struct user_page_alloc user_alloc;
+
 struct run {
   struct run *next;
 };
@@ -23,10 +27,19 @@ struct {
   struct run *freelist;
 } kmem;
 
+void init_live_pages()
+{
+  initlock(&live_list.lock, "live_list");
+  live_list.page_count = 0;
+}
+
 void
 kinit()
 {
+  init_live_pages();
+  initlock(&user_alloc.lock, "user_alloc");
   initlock(&kmem.lock, "kmem");
+  swapinit();
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -76,7 +89,8 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r) {
     memset((char*)r, 5, PGSIZE); // fill with junk
+  }
   return (void*)r;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..35a4825 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -2,10 +2,12 @@
 #include "param.h"
 #include "memlayout.h"
 #include "riscv.h"
-#include "spinlock.h"
+#include "swap.h"
 #include "proc.h"
 #include "defs.h"
 
+struct user_page_alloc user_alloc;
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -33,7 +35,7 @@ void
 proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-  
+
   for(p = proc; p < &proc[NPROC]; p++) {
     char *pa = kalloc();
     if(pa == 0)
@@ -48,7 +50,7 @@ void
 procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
@@ -93,7 +95,7 @@ int
 allocpid()
 {
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -236,7 +238,7 @@ userinit(void)
 
   p = allocproc();
   initproc = p;
-  
+
   // allocate one user page and copy initcode's instructions
   // and data into it.
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
@@ -263,7 +265,11 @@ growproc(int n)
   struct proc *p = myproc();
 
   sz = p->sz;
+
   if(n > 0){
+    acquire(&user_alloc.lock);
+    user_alloc.alloc = 1;
+    release(&user_alloc.lock);
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
     }
@@ -289,11 +295,12 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
+    release(&np->lock);
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
     return -1;
   }
+  acquire(&np->lock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -366,13 +373,12 @@ exit(int status)
   p->cwd = 0;
 
   acquire(&wait_lock);
-
   // Give any children to init.
   reparent(p);
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
@@ -414,9 +420,9 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
-          freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
+          freeproc(pp);
           return pid;
         }
         release(&pp->lock);
@@ -428,7 +434,7 @@ wait(uint64 addr)
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
@@ -446,7 +452,7 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
@@ -536,7 +542,7 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -615,7 +621,7 @@ int
 killed(struct proc *p)
 {
   int k;
-  
+
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..ffd9871 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -25,7 +25,7 @@ r_mstatus()
   return x;
 }
 
-static inline void 
+static inline void
 w_mstatus(uint64 x)
 {
   asm volatile("csrw mstatus, %0" : : "r" (x));
@@ -34,7 +34,7 @@ w_mstatus(uint64 x)
 // machine exception program counter, holds the
 // instruction address to which a return from
 // exception will go.
-static inline void 
+static inline void
 w_mepc(uint64 x)
 {
   asm volatile("csrw mepc, %0" : : "r" (x));
@@ -56,7 +56,7 @@ r_sstatus()
   return x;
 }
 
-static inline void 
+static inline void
 w_sstatus(uint64 x)
 {
   asm volatile("csrw sstatus, %0" : : "r" (x));
@@ -71,7 +71,7 @@ r_sip()
   return x;
 }
 
-static inline void 
+static inline void
 w_sip(uint64 x)
 {
   asm volatile("csrw sip, %0" : : "r" (x));
@@ -89,7 +89,7 @@ r_sie()
   return x;
 }
 
-static inline void 
+static inline void
 w_sie(uint64 x)
 {
   asm volatile("csrw sie, %0" : : "r" (x));
@@ -107,7 +107,7 @@ r_mie()
   return x;
 }
 
-static inline void 
+static inline void
 w_mie(uint64 x)
 {
   asm volatile("csrw mie, %0" : : "r" (x));
@@ -116,7 +116,7 @@ w_mie(uint64 x)
 // supervisor exception program counter, holds the
 // instruction address to which a return from
 // exception will go.
-static inline void 
+static inline void
 w_sepc(uint64 x)
 {
   asm volatile("csrw sepc, %0" : : "r" (x));
@@ -139,7 +139,7 @@ r_medeleg()
   return x;
 }
 
-static inline void 
+static inline void
 w_medeleg(uint64 x)
 {
   asm volatile("csrw medeleg, %0" : : "r" (x));
@@ -154,7 +154,7 @@ r_mideleg()
   return x;
 }
 
-static inline void 
+static inline void
 w_mideleg(uint64 x)
 {
   asm volatile("csrw mideleg, %0" : : "r" (x));
@@ -162,7 +162,7 @@ w_mideleg(uint64 x)
 
 // Supervisor Trap-Vector Base Address
 // low two bits are mode.
-static inline void 
+static inline void
 w_stvec(uint64 x)
 {
   asm volatile("csrw stvec, %0" : : "r" (x));
@@ -177,7 +177,7 @@ r_stvec()
 }
 
 // Machine-mode interrupt vector
-static inline void 
+static inline void
 w_mtvec(uint64 x)
 {
   asm volatile("csrw mtvec, %0" : : "r" (x));
@@ -203,7 +203,7 @@ w_pmpaddr0(uint64 x)
 
 // supervisor address translation and protection;
 // holds the address of the page table.
-static inline void 
+static inline void
 w_satp(uint64 x)
 {
   asm volatile("csrw satp, %0" : : "r" (x));
@@ -217,7 +217,7 @@ r_satp()
   return x;
 }
 
-static inline void 
+static inline void
 w_mscratch(uint64 x)
 {
   asm volatile("csrw mscratch, %0" : : "r" (x));
@@ -242,7 +242,7 @@ r_stval()
 }
 
 // Machine-mode Counter-Enable
-static inline void 
+static inline void
 w_mcounteren(uint64 x)
 {
   asm volatile("csrw mcounteren, %0" : : "r" (x));
@@ -305,7 +305,7 @@ r_tp()
   return x;
 }
 
-static inline void 
+static inline void
 w_tp(uint64 x)
 {
   asm volatile("mv tp, %0" : : "r" (x));
@@ -335,6 +335,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PGSIZE 4096 // bytes per page
 #define PGSHIFT 12  // bits of offset within a page
 
+#define MAXPHYPAGES 50
+
 #define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
 #define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
 
@@ -344,6 +346,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_SWAP (1L << 9)
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..3340847
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,159 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "swap.h"
+#include "defs.h"
+#include "param.h"
+#include "proc.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swapped_vpn {
+  uint64 vpn;
+};
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct swapped_pages {
+  struct swap swapped_blocks;
+  struct live_info page_info;
+  struct swapped_pages *next;
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  // printf("inside swapfree\n");
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+  // printf("exiting swapfree\n");
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  begin_op();
+  // printf("crossed begin op\n");
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    // printf("before balloc %d\n", myproc()->pid);
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    // printf("before bread\n");
+    bp = bread(ROOTDEV, *blockno);
+    // printf("before memmove\n");
+    memmove(bp->data, src_pa, BSIZE);
+    // printf("before log\n");
+    log_write(bp);
+    // printf("after log\n");
+    brelse(bp);
+
+  }
+  end_op();
+
+  printf("swapout called\n");
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+
+  printf("swapin called\n");
+}
diff --git a/kernel/swap.h b/kernel/swap.h
new file mode 100644
index 0000000..4548019
--- /dev/null
+++ b/kernel/swap.h
@@ -0,0 +1,25 @@
+#ifndef _SWAP_H_
+#define _SWAP_H_
+
+#include "types.h"
+#include "spinlock.h"
+#include "defs.h"
+
+struct user_page_alloc {
+  struct spinlock lock;
+  int alloc;
+};
+
+struct live_info{
+  uint64 vpn;
+  uint64 pa;
+  pagetable_t pagetable;
+};
+
+struct live_pages_list {
+  struct spinlock lock;
+  int page_count;
+  struct live_info page[MAXPHYPAGES];
+};
+
+#endif
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6db3c92 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_live_page_count(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_live_page_count] sys_live_page_count,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0ede973 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_live_page_count 22
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..1c1cdd2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,10 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_live_page_count(void)
+{
+  print_num_live_pages();
+  return 0;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..4b2e65d 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -2,13 +2,15 @@
 #include "param.h"
 #include "memlayout.h"
 #include "riscv.h"
-#include "spinlock.h"
+#include "swap.h"
 #include "proc.h"
 #include "defs.h"
 
 struct spinlock tickslock;
 uint ticks;
 
+extern struct live_pages_list live_list;
+
 extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
@@ -46,10 +48,10 @@ usertrap(void)
   w_stvec((uint64)kernelvec);
 
   struct proc *p = myproc();
-  
+
   // save user program counter.
   p->trapframe->epc = r_sepc();
-  
+
   if(r_scause() == 8){
     // system call
 
@@ -65,8 +67,39 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if (r_scause() == 15 || r_scause() == 13) {
+      struct proc *p = myproc();
+      uint flags;
+      uint64 va = PGROUNDDOWN(r_stval());
+      uint64 to_swap;
+      pte_t *pte;
+      char *mem;
+
+      if((pte = walk(p->pagetable, va, 0)) == 0) {
+        printf("Error in fetching last level PTE\n");
+        return ;
+      }
+      flags = PTE_FLAGS(*pte);
+      if(flags & PTE_SWAP) {
+        flags &= (~PTE_SWAP);
+        flags |= (PTE_V);
+        to_swap = (*pte >> 10);
+        if (swap_out() == 0) {
+          panic("swapout\n");
+        }
+        if((mem = kalloc()) == 0) {
+          panic("kalloc\n");
+        }
+        uvmunmap(p->pagetable, va, 1, 0);
+        swapin(mem, (struct swap *)to_swap);
+
+        if((mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags)) != 0) {
+          panic("in trap, mapping failed\n");
+        }
+        swapfree((struct swap *)to_swap);
+      }
   } else if((which_dev = devintr()) != 0){
-    // ok
+     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
@@ -109,7 +142,7 @@ usertrapret(void)
 
   // set up the registers that trampoline.S's sret will use
   // to get to user space.
-  
+
   // set S Previous Privilege mode to User.
   unsigned long x = r_sstatus();
   x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
@@ -122,7 +155,7 @@ usertrapret(void)
   // tell trampoline.S the user page table to switch to.
   uint64 satp = MAKE_SATP(p->pagetable);
 
-  // jump to userret in trampoline.S at the top of memory, which 
+  // jump to userret in trampoline.S at the top of memory, which
   // switches to the user page table, restores user registers,
   // and switches to user mode with sret.
   uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
@@ -131,14 +164,14 @@ usertrapret(void)
 
 // interrupts and exceptions from kernel code go here via kernelvec,
 // on whatever the current kernel stack is.
-void 
+void
 kerneltrap()
 {
   int which_dev = 0;
   uint64 sepc = r_sepc();
   uint64 sstatus = r_sstatus();
   uint64 scause = r_scause();
-  
+
   if((sstatus & SSTATUS_SPP) == 0)
     panic("kerneltrap: not from supervisor mode");
   if(intr_get() != 0)
@@ -208,7 +241,7 @@ devintr()
     if(cpuid() == 0){
       clockintr();
     }
-    
+
     // acknowledge the software interrupt by clearing
     // the SSIP bit in sip.
     w_sip(r_sip() & ~2);
@@ -218,4 +251,3 @@ devintr()
     return 0;
   }
 }
-
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..6c0c147 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -6,6 +6,21 @@
 #include "defs.h"
 #include "fs.h"
 
+#include "swap.h"
+#include "proc.h"
+
+extern struct user_page_alloc user_alloc;
+
+struct live_pages_list live_list;
+struct swapped_pages *swapped_list;
+
+void print_num_live_pages() {
+  acquire(&live_list.lock);
+  printf("Live Pages: %d\n", live_list.page_count);
+  release(&live_list.lock);
+}
+
+
 /*
  * the kernel's page table.
  */
@@ -45,7 +60,7 @@ kvmmake(void)
 
   // allocate and map a kernel stack for each process.
   proc_mapstacks(kpgtbl);
-  
+
   return kpgtbl;
 }
 
@@ -90,6 +105,9 @@ walk(pagetable_t pagetable, uint64 va, int alloc)
 
   for(int level = 2; level > 0; level--) {
     pte_t *pte = &pagetable[PX(level, va)];
+    if ((*pte & PTE_SWAP)) {
+      return pte;
+    }
     if(*pte & PTE_V) {
       pagetable = (pagetable_t)PTE2PA(*pte);
     } else {
@@ -147,12 +165,13 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 
   if(size == 0)
     panic("mappages: size");
-  
+
   a = PGROUNDDOWN(va);
   last = PGROUNDDOWN(va + size - 1);
   for(;;){
-    if((pte = walk(pagetable, a, 1)) == 0)
+    if((pte = walk(pagetable, a, 1)) == 0) {
       return -1;
+    }
     if(*pte & PTE_V)
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
@@ -179,13 +198,24 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
-    if(PTE_FLAGS(*pte) == PTE_V)
+
+    if (((*pte & PTE_V) == 0) && (*pte & PTE_SWAP) == 0)
+        panic("uvmunmap: not mapped");
+    if (PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
-      uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+      if (*pte & PTE_SWAP) {
+        struct swap *swap_addr = (struct swap *)((*pte) >> 10);
+        swapfree(swap_addr);
+      } else {
+        uint64 pa = PTE2PA(*pte);
+        int i = search_live_page(pa);
+
+        if (i >= 0) {
+          remove_live_page(i);
+        }
+        kfree((void*)pa);
+      }
     }
     *pte = 0;
   }
@@ -220,6 +250,96 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
   memmove(mem, src, sz);
 }
 
+void
+add_live_page(pagetable_t pagetable, uint64 va, uint64 pa) {
+  acquire(&live_list.lock);
+  if(live_list.page_count >= 50) {
+    panic ("Live page full\n");
+  }
+  live_list.page[live_list.page_count].pagetable = pagetable;
+  live_list.page[live_list.page_count].vpn = va;
+  live_list.page[live_list.page_count].pa = pa;
+  live_list.page_count++;
+  release(&live_list.lock);
+}
+
+int
+search_live_page(uint64 pa) {
+  acquire(&live_list.lock);
+  for (int i = 0; i < live_list.page_count; i++) {
+      if (pa == live_list.page[i].pa) {
+        release(&live_list.lock);
+        return i;
+      }
+  }
+
+  release(&live_list.lock);
+  return -1;
+}
+
+struct live_info
+remove_live_page(int i) {
+  acquire(&live_list.lock);
+  if(live_list.page_count <= i) {
+    panic ("Empty live_list\n");
+  }
+  struct live_info temp = live_list.page[i];
+  for(int i = i; i < live_list.page_count-1; i++) {
+    live_list.page[i] = live_list.page[i+1];
+  }
+  live_list.page_count--;
+
+  release(&live_list.lock);
+  return temp;
+}
+
+
+
+// returns 0 if not successful
+uint
+swap_out() {
+  pte_t *pte;
+  uint64 pa;
+  uint flags;
+
+  acquire(&live_list.lock);
+  if (live_list.page_count >= 50) {
+    release(&live_list.lock);
+    struct live_info to_remove = remove_live_page(0);
+    acquire(&live_list.lock);
+
+    pagetable_t pagetable = to_remove.pagetable;
+    uint64 va = to_remove.vpn;
+    pa = to_remove.pa;
+
+    struct swap* to_swap;
+    if((to_swap = swapalloc()) == 0) {
+      printf("Memory cannot be allocated\n");
+      release(&live_list.lock);
+      return 0;
+    }
+
+    release(&live_list.lock);
+    swapout(to_swap, (char *)pa);
+    acquire(&live_list.lock);
+
+    if((pte = walk(pagetable, va, 0)) == 0) {
+      printf("Error in fetching last level PTE\n");
+      release(&live_list.lock);
+      return 0;
+    }
+    flags = PTE_FLAGS(*pte);
+    flags |= PTE_SWAP;
+    flags &= (~PTE_V);
+
+    kfree((void *)PGROUNDDOWN(pa));
+    *pte = ((uint64)to_swap << 10) | flags;
+  }
+
+  release(&live_list.lock);
+  return 1;
+}
+
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
@@ -227,16 +347,14 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 {
   char *mem;
   uint64 a;
-
   if(newsz < oldsz)
     return oldsz;
 
   oldsz = PGROUNDUP(oldsz);
-  for(a = oldsz; a < newsz; a += PGSIZE){
+  for(a = oldsz; a < newsz; a += PGSIZE) {
     mem = kalloc();
     if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
-      return 0;
+      goto err;
     }
     memset(mem, 0, PGSIZE);
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
@@ -244,8 +362,30 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+
+    acquire(&user_alloc.lock);
+    if(user_alloc.alloc == 1) {
+      release(&user_alloc.lock);
+      if (swap_out() == 0)
+        goto err;
+
+      add_live_page(pagetable, a, (uint64)mem);
+    } else {
+      release(&user_alloc.lock);
+    }
   }
+
+  acquire(&user_alloc.lock);
+  user_alloc.alloc = 0;
+  release(&user_alloc.lock);
   return newsz;
+
+  err:
+    uvmdealloc(pagetable, a, oldsz);
+    acquire(&user_alloc.lock);
+    user_alloc.alloc = 0;
+    release(&user_alloc.lock);
+    return 0;
 }
 
 // Deallocate user pages to bring the process size from oldsz to
@@ -311,20 +451,68 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
+    if((pte = walk(old, i, 0)) == 0){
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    }
+    // not valid and not swapped
+    if(((*pte & PTE_V) == 0) && (*pte & PTE_SWAP) == 0){
       panic("uvmcopy: page not present");
+    }
+    //either valid or swapped
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    if(flags & PTE_SWAP) {
+      // swapped memory for parent
+      if(swap_out() == 0) {
+        goto err;
+      }
+
+      char *mem2;
+      struct swap* to_swap = (struct swap*)(*pte >> 10);
+      flags &= (~PTE_SWAP);
+      flags |= (PTE_V);
+
+      if ((mem2 = kalloc()) == 0) {
+        goto err;
+      }
+
+      swapin((char *)mem2, to_swap);
+      add_live_page(old, i, (uint64)mem2);
+
+      if(mappages(old, i, PGSIZE, (uint64)mem2, flags) != 0){
+        kfree(mem2);
+        goto err;
+      }
+      pa = (uint64)mem2;
+      swapfree(to_swap);
+    }
+    // all parent pages are either live or not swappable
+    // for child, memory alloc
+    if((mem = kalloc()) == 0){
       goto err;
+    }
     memmove(mem, (char*)pa, PGSIZE);
+
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
     }
+
+    int parent_livepage_idx = search_live_page(pa);
+
+    if (parent_livepage_idx == -1) {
+      // not live page. so directly map
+    } else {
+      // parent is a live page. So,
+      // child should be kept in live
+      if (swap_out() == 0){
+        goto err;
+      }
+
+      add_live_page(new, i, (uint64)mem);
+    }
   }
+
   return 0;
 
  err:
@@ -338,7 +526,7 @@ void
 uvmclear(pagetable_t pagetable, uint64 va)
 {
   pte_t *pte;
-  
+
   pte = walk(pagetable, va, 0);
   if(pte == 0)
     panic("uvmclear");
diff --git a/user/testlivepage.c b/user/testlivepage.c
new file mode 100644
index 0000000..8de04d1
--- /dev/null
+++ b/user/testlivepage.c
@@ -0,0 +1,22 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+void main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        printf("Usage: testlivepage <number of pages>\n");
+        exit(1);
+    }
+
+    int n = atoi(argv[1]);
+
+    sbrk(PGSIZE * n);
+
+    live_page_count();
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testpagefork.c b/user/testpagefork.c
new file mode 100644
index 0000000..5dbc7f4
--- /dev/null
+++ b/user/testpagefork.c
@@ -0,0 +1,31 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void main(int argc, char *argv[]) {
+  int num_pages_to_allocate = MAXPHYPAGES + 3;
+  int *addr = (int *)sbrk(PGSIZE * num_pages_to_allocate);
+
+  int x = 10;
+  printf("setting %d in the first address\n", x);
+  *addr = x;
+
+  printf("forking...\n");
+
+  int pid = fork();
+  if (pid == 0)
+  {
+    printf("child: value at the first address = %d\n", *addr);
+    exit(0);
+  } else {
+    wait(0);
+    printf("parent: value at the first address: %d\n", *addr);
+  }
+
+  if (*addr == x)
+    printf("value at the first address matched with the value set in parent\n");
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/testswap.c b/user/testswap.c
new file mode 100644
index 0000000..d27cfb5
--- /dev/null
+++ b/user/testswap.c
@@ -0,0 +1,45 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+/*
+This is an important place to test your implementation. You can run the test code that you implemented in step 2. You should test after each small update of the code and check if it works as expected (for example, first check if you can swap out pages and reduce the number of live pages, and get panic when a swapped-out page is accessed; then check if you can swap in a page when required.).
+*/
+
+void main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        printf("Usage: testlivepage <number of pages>\n");
+        exit(1);
+    }
+
+    int n = atoi(argv[1]);
+
+    char *a = (char*) sbrk(PGSIZE * n);
+    // if n > MAXPHYPAGES, swapout is called (n - MAXPHYPAGES) times
+
+    sleep(20);
+
+    live_page_count();
+    // as a result, when n > MAXPHYPAGES, number of livepages becomes 50 since rest of them are swapped out
+
+    // checking if a page is swapped-in if required
+    for (int i = MAXPHYPAGES*PGSIZE; i < (MAXPHYPAGES+2)*PGSIZE; i++)
+    {
+        *a='a';
+        a++;
+    }
+    a--;
+
+    for (int i = MAXPHYPAGES*PGSIZE; i < (MAXPHYPAGES+2)*PGSIZE; i+=PGSIZE)
+    {
+        printf("%c",*a);
+        a-=PGSIZE;
+    }
+    printf("\n");
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..6f941ea 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int live_page_count(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..aecf61c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("live_page_count");
