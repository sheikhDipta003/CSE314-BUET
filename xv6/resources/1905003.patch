diff --git a/Makefile b/Makefile
index 39a99d7..6978d95 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..db72a67 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+#define DEFAULT_TICKET_COUNT 10
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..6cc3820 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -125,6 +125,11 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  //initialize required parameters for scheduling
+  p->tickets_original = DEFAULT_TICKET_COUNT;
+  p->time_slices_total = p->time_slices_curr = 0;
+  p->tickets_current = p->tickets_original;
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..407313c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,11 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int inQ;
+  int tickets_original;
+  int tickets_current;
+  int time_slices_total;
+  int time_slices_curr;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..91499fb
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC]; // the process ID of each process
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC]; // which queue the process is currently in
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..bb1240e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -1,5 +1,5 @@
 #include "types.h"
-#include "param.h"
+#include "pstat.h"
 #include "memlayout.h"
 #include "riscv.h"
 #include "spinlock.h"
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getpinfo(void);
+extern uint64 sys_settickets(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getpinfo]   sys_getpinfo,
+[SYS_settickets]   sys_settickets,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..98338aa 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getpinfo  22
+#define SYS_settickets  23
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..5721308 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -7,7 +7,7 @@
 #include "types.h"
 #include "riscv.h"
 #include "defs.h"
-#include "param.h"
+#include "pstat.h"
 #include "stat.h"
 #include "spinlock.h"
 #include "proc.h"
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..90f9d37 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -1,11 +1,13 @@
 #include "types.h"
 #include "riscv.h"
 #include "defs.h"
-#include "param.h"
+#include "pstat.h"
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
 
+extern struct proc proc[NPROC];
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +91,55 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//When the getpinfo() routine is called, the pstat structure should be updated with the necessary values
+uint64
+sys_getpinfo(void)
+{
+  // user pointer to struct pstat
+  uint64 ps;
+  argaddr(0, &ps);
+
+  struct pstat pt;
+  struct proc *p;
+  int i=0;
+  for (p = proc; p < &proc[NPROC]; p++) {
+      pt.pid[i] = p->pid;
+      pt.inuse[i] = p->state != UNUSED;
+      pt.inQ[i] = p->inQ;
+      pt.tickets_original[i] = p->tickets_original;
+      pt.tickets_current[i] = p->tickets_current;
+      pt.time_slices[i] = p->time_slices_total;
+      i++;
+  }
+
+  // printf("sys_getpinfo: mypid = %d\n", myproc()->pid);
+
+  if(copyout(myproc()->pagetable, ps, (char *)&pt, sizeof(pt)) < 0) return -1;   //error in copying result to user-space
+
+  return 0;   // all ok
+}
+
+uint64
+sys_settickets(void)
+{
+  int mypid = myproc()->pid;
+  int t;
+  argint(0, &t);
+
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if (p->pid == mypid) {
+        if(t < 1) {
+          p->tickets_current = p->tickets_original = DEFAULT_TICKET_COUNT;
+          return -1;    //number of tickets must be >= 1
+        }
+
+        // printf("sys_settickets: mypid = %d\n", mypid);
+        p->tickets_current = p->tickets_original = t;
+        break;
+    }
+  }
+
+  return 0; // all ok
+}
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..c5d1002
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,24 @@
+#include "kernel/pstat.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    if(argc != 2){
+        fprintf(2, "Usage: %s ticket-count\n", argv[0]);
+        return 0;
+    }
+    if (settickets(atoi(argv[1])) < 0) {
+        fprintf(2, "%s: settickets failed\n", argv[0]);
+        return 0;
+    }
+
+    while (1)
+    {
+        /* code */
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..24b55f9
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,30 @@
+#include "kernel/pstat.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+
+  if(argc != 1){
+    fprintf(2, "Usage: %s\n", argv[0]);
+    return 0;
+  }
+  else{
+    struct pstat* ps = malloc(sizeof(struct pstat));
+
+    if ( getpinfo(ps) < 0) {
+        fprintf(2, "%s: testprocinfo failed\n", argv[0]);
+        return 0;
+    }
+
+    printf("PID\t|\tIn Use\t|\tinQ\t|\tOriginal Tickets\t|\tCurrent Tickets\t|\tTime Slices\t\n");
+    for(int i = 0; i < NPROC; i++){
+        if(ps->pid[i] && ps->tickets_current[i] > 0) printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", ps->pid[i], ps->inuse[i], ps->inQ[i], ps->tickets_original[i], ps->tickets_current[i], ps->time_slices[i]);
+    }
+    free(ps);
+  }
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..d10486f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getpinfo(struct pstat*);
+int settickets(int number);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..b7ddd8b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getpinfo");
+entry("settickets");
