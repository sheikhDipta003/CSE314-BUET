diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..4e7f7f8
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,10 @@
+{
+    "files.associations": {
+        "stat.h": "c",
+        "types.h": "c",
+        "param.h": "c",
+        "proc.h": "c",
+        "memlayout.h": "c",
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..b3663db 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d0976b1 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -381,6 +381,7 @@ exit(int status)
   release(&wait_lock);
 
   // Jump into the scheduler, never to return.
+  p->arg_t=-1;  //invalidate arg_t
   sched();
   panic("zombie exit");
 }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ea37288 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int arg_t;                   // argument of trace syscall, that is, the syscall it wants to trace
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..bc0e48b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_historyhelp(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +129,15 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history]   sys_history,
+[SYS_historyhelp]   sys_historyhelp,
 };
 
+char syscall_names[23][10]={"fork","exit","wait","pipe","read","kill","exec","fstat","chdir","dup","getpaid","sbrk","sleep","uptime","open","write","mknod","unlink","link","mkdir","close","trace","history"};
+int syscall_count[23]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
+int syscall_time[23]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
+
 void
 syscall(void)
 {
@@ -138,7 +148,25 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    if(num == p->arg_t){    //if 'trace' syscall is called
+      //print trace results
+      printf("pid: %d, syscall: %s, ", p->pid, syscall_names[num-1]);
+    }
+
+    uint64 start, end;
+
+    start = syscalls[SYS_uptime]();
     p->trapframe->a0 = syscalls[num]();
+    end = syscalls[SYS_uptime]();
+
+    syscall_count[num-1]++;
+    syscall_time[num-1] += (end-start);
+
+    if(num == p->arg_t){    //if 'trace' syscall is called
+      //print trace results
+      if(p->arg_t==SYS_history) p->arg_t = -1;  //so that the trace results are printed only once for a history command
+      printf("return: %d\n", p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..fedad38 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history  23
+#define SYS_historyhelp  24
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..679a85a 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -15,6 +15,7 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
+#include "syscall.h"
 
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
@@ -57,6 +58,9 @@ sys_dup(void)
   struct file *f;
   int fd;
 
+  int x; argint(0, &x);
+  if(myproc()->arg_t == SYS_dup) printf("args: (%d), ", x);
+
   if(argfd(0, 0, &f) < 0)
     return -1;
   if((fd=fdalloc(f)) < 0)
@@ -74,6 +78,10 @@ sys_read(void)
 
   argaddr(1, &p);
   argint(2, &n);
+
+  int x; argint(0, &x);
+  if(myproc()->arg_t == SYS_read) printf("args: (%d, %p, %d), ", x, p, n);
+
   if(argfd(0, 0, &f) < 0)
     return -1;
   return fileread(f, p, n);
@@ -88,6 +96,10 @@ sys_write(void)
   
   argaddr(1, &p);
   argint(2, &n);
+
+  int x; argint(0, &x);
+  if(myproc()->arg_t == SYS_write) printf("args: (%d, %p, %d), ", x, p, n);
+
   if(argfd(0, 0, &f) < 0)
     return -1;
 
@@ -100,6 +112,9 @@ sys_close(void)
   int fd;
   struct file *f;
 
+  int x; argint(0, &x);
+  if(myproc()->arg_t == SYS_close) printf("args: (%d), ", x);
+
   if(argfd(0, &fd, &f) < 0)
     return -1;
   myproc()->ofile[fd] = 0;
@@ -114,6 +129,10 @@ sys_fstat(void)
   uint64 st; // user pointer to struct stat
 
   argaddr(1, &st);
+
+  int x; argint(0, &x);
+  if(myproc()->arg_t == SYS_fstat) printf("args: (%d, %p), ", x, st);
+
   if(argfd(0, 0, &f) < 0)
     return -1;
   return filestat(f, st);
@@ -129,6 +148,8 @@ sys_link(void)
   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
     return -1;
 
+  if(myproc()->arg_t == SYS_link) printf("args: (%s, %s), ", old, new);
+
   begin_op();
   if((ip = namei(old)) == 0){
     end_op();
@@ -196,6 +217,8 @@ sys_unlink(void)
   if(argstr(0, path, MAXPATH) < 0)
     return -1;
 
+  if(myproc()->arg_t == SYS_unlink) printf("args: (%s), ", path);
+
   begin_op();
   if((dp = nameiparent(path, name)) == 0){
     end_op();
@@ -314,6 +337,8 @@ sys_open(void)
   if((n = argstr(0, path, MAXPATH)) < 0)
     return -1;
 
+  if(myproc()->arg_t == SYS_open) printf("args: (%s, %d), ", path, omode);
+
   begin_op();
 
   if(omode & O_CREATE){
@@ -381,6 +406,9 @@ sys_mkdir(void)
     end_op();
     return -1;
   }
+
+  if(myproc()->arg_t == SYS_mkdir) printf("args: (%s), ", path);
+
   iunlockput(ip);
   end_op();
   return 0;
@@ -401,6 +429,9 @@ sys_mknod(void)
     end_op();
     return -1;
   }
+
+  if(myproc()->arg_t == SYS_mknod) printf("args: (%s, %d, %d), ", path, major, minor);
+
   iunlockput(ip);
   end_op();
   return 0;
@@ -418,6 +449,9 @@ sys_chdir(void)
     end_op();
     return -1;
   }
+
+  if(myproc()->arg_t == SYS_chdir) printf("args: (%s), ", path);
+
   ilock(ip);
   if(ip->type != T_DIR){
     iunlockput(ip);
@@ -442,6 +476,9 @@ sys_exec(void)
   if(argstr(0, path, MAXPATH) < 0) {
     return -1;
   }
+
+  if(myproc()->arg_t == SYS_exec) printf("args: (%s, %p), ", path, uargv);
+
   memset(argv, 0, sizeof(argv));
   for(i=0;; i++){
     if(i >= NELEM(argv)){
@@ -485,6 +522,9 @@ sys_pipe(void)
   argaddr(0, &fdarray);
   if(pipealloc(&rf, &wf) < 0)
     return -1;
+
+  if(myproc()->arg_t == SYS_pipe) printf("args: (%p), ", fdarray);
+
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
     if(fd0 >= 0)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..af7117d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,12 +5,21 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall.h"
+
+extern char syscall_names[23][10];
+extern int syscall_count[23];
+extern int syscall_time[23];
+uint64 st;
 
 uint64
 sys_exit(void)
 {
   int n;
   argint(0, &n);
+
+  if(myproc()->arg_t == SYS_exit) printf("args: (%d), ", n);
+
   exit(n);
   return 0;  // not reached
 }
@@ -18,12 +27,16 @@ sys_exit(void)
 uint64
 sys_getpid(void)
 {
+  if(myproc()->arg_t == SYS_getpid) printf("args: (), ");
+
   return myproc()->pid;
 }
 
 uint64
 sys_fork(void)
 {
+  if(myproc()->arg_t == SYS_fork) printf("args: (), ");
+
   return fork();
 }
 
@@ -32,6 +45,9 @@ sys_wait(void)
 {
   uint64 p;
   argaddr(0, &p);
+
+  if(myproc()->arg_t == SYS_wait) printf("args: (%p), ", p);
+
   return wait(p);
 }
 
@@ -42,6 +58,9 @@ sys_sbrk(void)
   int n;
 
   argint(0, &n);
+
+  if(myproc()->arg_t == SYS_sbrk) printf("args: (%d), ", n);
+
   addr = myproc()->sz;
   if(growproc(n) < 0)
     return -1;
@@ -55,6 +74,9 @@ sys_sleep(void)
   uint ticks0;
 
   argint(0, &n);
+
+  if(myproc()->arg_t == SYS_sleep) printf("args: (%d), ", n);
+
   acquire(&tickslock);
   ticks0 = ticks;
   while(ticks - ticks0 < n){
@@ -74,6 +96,9 @@ sys_kill(void)
   int pid;
 
   argint(0, &pid);
+
+  if(myproc()->arg_t == SYS_kill) printf("args: (%d), ", pid);
+
   return kill(pid);
 }
 
@@ -87,5 +112,74 @@ sys_uptime(void)
   acquire(&tickslock);
   xticks = ticks;
   release(&tickslock);
+
+  if(myproc()->arg_t == SYS_uptime) printf("args: (), ");
+
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  argint(0, &myproc()->arg_t);
+  if(myproc()->arg_t == SYS_trace) printf("args: (%d), ", myproc()->arg_t);
+  return 0;     //all ok
+}
+
+uint64
+sys_historyhelp(void)
+{
+  // user pointer to struct syscall_stat
+  argaddr(0, &st);
+
+  return 0;   // all ok
+}
+
+//takes only syscall_num as argument; uses sys_historyhelp()
+// uint64
+// sys_history(void)
+// {
+//   struct proc* p = myproc();
+//   if(p->arg_t == SYS_history) printf("args: (%d), ", p->arg_t);
+
+//   int sn;   //system call number to trace history of
+//   argint(0, &sn);
+
+//   struct syscall_stat _ret;
+
+//   strncpy((&_ret)->syscall_name, syscall_names[sn-1], sizeof((&_ret)->syscall_name)-1);
+//   (&_ret)->count = syscall_count[sn-1];
+//   (&_ret)->accum_time = syscall_time[sn-1];
+
+//   if(copyout(p->pagetable, st, (char *)&_ret, sizeof(_ret)) < 0) return -1;   //error in copying result to user-space
+
+//   return 0;   // all ok
+// }
+
+//takes both structure pointer and syscall_num as argument
+uint64
+sys_history(void)
+{
+  struct proc* p = myproc();
+
+  // user pointer to struct syscall_stat
+  argaddr(0, &st);
+
+  if(p->arg_t == SYS_history) printf("args: (%p, %d), ", st, p->arg_t);
+
+  // user pointer to struct syscall_stat
+  argaddr(0, &st);
+
+  int sn;   //system call number to trace history of
+  argint(1, &sn);
+
+  struct syscall_stat _ret;
+
+  strncpy((&_ret)->syscall_name, syscall_names[sn-1], sizeof((&_ret)->syscall_name)-1);
+  (&_ret)->count = syscall_count[sn-1];
+  (&_ret)->accum_time = syscall_time[sn-1];
+
+  if(copyout(p->pagetable, st, (char *)&_ret, sizeof(_ret)) < 0) return -1;   //error in copying result to user-space
+
+  return 0;   // all ok
+}
diff --git a/kernel/types.h b/kernel/types.h
index ee73164..dbdd98b 100644
--- a/kernel/types.h
+++ b/kernel/types.h
@@ -8,3 +8,10 @@ typedef unsigned int  uint32;
 typedef unsigned long uint64;
 
 typedef uint64 pde_t;
+
+//history
+struct syscall_stat{
+    char syscall_name[16];
+    int count;
+    int accum_time;
+};
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..098f330
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,42 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+
+  if(argc < 1 || argc > 2 || (!strcmp(argv[1], "") && (argv[1][0] < '0' || argv[1][0] > '9'))){
+    fprintf(2, "Usage: %s sys_call_num\n", argv[0]);
+    exit(1);
+  }
+  else if(argc==1){
+    for(int i = 1; i <= 23; i++){
+      struct syscall_stat* ss = malloc(sizeof(struct syscall_stat));
+      // historyhelp(ss);
+
+      if ( history(ss, i) < 0) {
+        fprintf(2, "%s: history failed\n", argv[0]);
+        exit(1);
+      }
+
+      printf("%d:\tsyscall: %s, #: %d, time: %d\n", i, ss->syscall_name, ss->count,ss->accum_time);
+      free(ss);
+    }
+  }
+  else{
+    struct syscall_stat* ss = (struct syscall_stat*) malloc(sizeof(struct syscall_stat));
+    // historyhelp(ss);
+
+    if ( history(ss, atoi(argv[1])) < 0) {
+      fprintf(2, "%s: history failed\n", argv[0]);
+      exit(1);
+    }
+
+    printf("%d:\tsyscall: %s, #: %d, time: %d\n", atoi(argv[1]), ss->syscall_name, ss->count,ss->accum_time);
+    free(ss);
+  }
+
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..3dd9b4c
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..77fb1a1 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(struct syscall_stat*, int);
+// int history(int);
+int historyhelp(struct syscall_stat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bcb20bf 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("historyhelp");
